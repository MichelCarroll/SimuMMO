

import Game from '../game/Server/Game.js'
const should = require("should");

const synaptic = require('synaptic');

describe('lol', function() {
  let game = null;

  beforeEach(function(){
    game = new Game({training: 'default'});
    game.run(10000);
  });

  it('lol', function() {
    // game.debug();
    should(game.playerAgent.target.getComponent('inventory').money).be.above(0);
  });

});

//
// var trainingData = {
//   x: '[[1,0,1,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0],[1,0,0,0,0,0],[1,0,0,1,0,0],[1,0,0,1,0,0],[1,0,0,0,1,0],[1,0,0,1,0,0],[1,0,1,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[1,0,1,0,0,0],[0,0,0,0,0,0],[1,0,1,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0],[1,0,0,1,0,0],[1,0,1,0,0,0],[0,0,0,0,0,0],[1,0,1,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[1,0,0,0,1,0],[1,0,0,0,0,1],[1,0,1,0,0,0],[0,0,0,0,0,0],[1,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0],[1,0,0,0,0,0],[1,0,0,0,1,0],[1,0,0,1,0,0],[1,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,1,0],[1,0,0,0,1,0],[1,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,5,0,0,0,0],[1,5,0,1,0,0],[1,5,0,0,0,0],[1,5,0,1,0,0],[1,5,0,0,0,1],[1,0,1,0,0,0],[0,0,1,0,0,0]]',
//   y: '[[1.3627476926614248],[1.692149586166975],[0.5926955112353751],[0.6985360770196768],[0.5993985022441528],[0.5993121377059376],[0.698134358100703],[0.5905883661788651],[1.7534107644321857],[0.6826940943474953],[1.7532566996873364],[1.7920215432748057],[1.7998617080318438],[1.7999998144858451],[1.7999999999979732],[0.6000000000000001],[0.6000000000000001],[1.8],[1.8],[1.8],[0.7000000000000001],[0.7000000000000001],[1.8],[0.7000000000000001],[0.7000000000000001],[1.8],[1.8],[1.8],[0.7000000000000001],[1.8],[0.6000000000000001],[0.7000000000000001],[0.7000000000000001],[0.6000000000000001],[1.8],[0.7000000000000001],[1.8],[0.7000000000000001],[0.7000000000000001],[0.7000000000000001],[1.8],[0.7000000000000001],[6.8],[1.8],[0.6000000000000001],[0.7000000000000001],[0.6000000000000001],[5.8],[1.8],[0.7000000000000001]]'
// };

//
// const synaptic = require('synaptic');
// var network = new synaptic.Architect.Perceptron(2, 3, 1);
// // var network = new synaptic.Architect.Perceptron(6, 6, 6,6,6,6,1);
//
//
// // var trainingData = [
// //   {x: [1,0,1,0,0,0], y: [0.1]},
// //   {x: [1,0,0,1,0,0], y: [0.5]},
// //   {x: [0,0,0,0,1,0], y: [0.1]},
// //   {x: [0,0,0,0,0,1], y: [1]},
// //   {x: [0,1,1,0,0,0], y: [1]},
// //   {x: [1,1,0,0,0,1], y: [0.1]},
// //   {x: [1,1,0,0,1,0], y: [1]},
// //   {x: [1,0,0,0,0,1], y: [0.1]},
// // ];
// var trainingData = [
//   {x: [1,0], y: [1]},
//   {x: [0,1], y: [1]},
//   {x: [1,1], y: [0]},
//   {x: [0,0], y: [0]},
// ];
//
// for(let x = 0; x < 10000; x++) {
//   trainingData.forEach((data) => {
//     network.activate(data.x);
//     network.propagate(0.3, data.y);
//   });
// }
//
// // console.log(network.activate([1,0]));
// // console.log(network.activate([0,1]));
// // console.log(network.activate([1,1]));
// // console.log(network.activate([0,0]));
// trainingData.forEach((data) => {
//   console.log(network.activate(data.x));
// });
//
// console.log(network.toJSON())
